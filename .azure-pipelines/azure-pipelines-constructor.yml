# Run constructor after xfel-feedstock finishes

# no continuous integration builds or pull requests
trigger: none
pr: none

resources:
  pipelines:
  - pipeline: xfel_feedstock
    project: 'feedstock-builds'
    source: 'xfel-feedstock'
    trigger:
      enabled: true
      branches: ['kokkos']

jobs:
- job: Construct_xfel_installer

  strategy:
    matrix:
      linux_py39:
        vmImage: ubuntu-latest
        platform: Linux-x86_64
        py_ver: 3.9
      macOS_py39:
        vmImage: macOS-latest
        platform: MacOSX-x86_64
        py_ver: 3.9
      macOS_arm64_py39:
        vmImage: macOS-latest
        platform: MacOSX-arm64
        py_ver: 3.9

  pool:
    vmImage: $(vmImage)
  timeoutInMinutes: 360

  # variables for version
  variables:
    year: $(Get-Date -Format yyyy)
    month: $(Get-Date -Format MM)
    day: $(Get-Date -Format dd)
    version: $(year).$(month)a$(day)

  steps:

  - task: InstallSSHKey@0
    inputs:
      knownHostsEntry: boa.lbl.gov ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAnPOtqyYASs6hc3fsmUQn92ovSozJsMsJyrMWjppUERX1tD4Fh0D7YaNhLvYpKi5mYVREo+tsKoOatCcqKGHCONWpzx7JHXUzfIBsy6nCeygRyyW4yuyoCuYFvOYLkaM4PrN/7XaZEnp1ux6/ZcbRxBDNK4f42svJUV39OX33tRuQWpP+O85paJr1ePHVz6U2n14a+3fRN3DBMti1dJuKOThU4djYEBQimx54pnW71eYORN2oUz+N/4RHAcomtxZpcUMl3Qadw8hD4s1XM6fzJ0Que7KefnnrPOgAEtZxKl9j09aaE70Oh+ie5Y6ckwddJ/4qZB5m2tBaEi3xuy0TSQ==
      sshPublicKey: ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA7XgVgdU9GmZuo5yVyW/htrAuxe7ypuq7IowWwfUC0WZw9SPzQ8kOGj63plF3ytx/qpgvUlS1AiywO20rZ83gHmRdAiuvt9laH09KlWEUhIhAQTzesqBG5aUT0MKo01yxijoRl5HC8w/MdOanc0h01e6IxnZvgG0N30RB1i4xVPCtR/VBmXSp4R0T+Q/gJjfQssuBxHVMrrute4V3uUHek58FL2QgUB0+zq6ipETjuCJxTSyYVAFtCYDPYs+0lAYYkWrXALCr9kX9s22jYtkyv5kNw6mEW8nhtA7GbTdJLv4M6/WYtcvQV8TDcNCfltOfl81U3gcZ9zhQDKGVoNaJEw== buildbot@cci.lbl.gov
      sshKeySecureFile: id_rsa
    displayName: Download SSH key

  - task: DownloadSecureFile@1
    name: upload_key
    inputs:
      secureFile: phenix-lbl-4f3f6ca7f212.json

  # set version
  - powershell: |
      $trimmed_month = $(month).TrimStart("0")
      $trimmed_day = $(day).TrimStart("0")
      Write-Host $trimmed_month
      Write-Host $trimmed_day
      Write-Host "##vso[task.setVariable variable=year]$(year)"
      Write-Host "##vso[task.setVariable variable=month]$trimmed_month"
      Write-Host "##vso[task.setVariable variable=day]$trimmed_day"
      Write-Host $(year)
      Write-Host $(month)
      Write-Host $(day)
    displayName: Set variables from date

  - script: |
      version=$(year).$(month).$(day)
      echo "##vso[task.setVariable variable=version]$version"
      echo $(version)
    displayName: Set version

  - script: |
      set -xe
      release=`echo $(Build.SourceBranch) | sed 's/refs\/heads\/releases\///'`
      echo "##vso[task.setVariable variable=version]$release"
      echo $(version)
    displayName: Override version for release branch
    condition: startswith(variables['Build.SourceBranch'], 'refs/heads/releases/')

  # download sources
  - checkout: self

  # clean up linux image
  - script: |
      sudo $(Build.Repository.LocalPath)/scripts/clean_linux.sh
    displayName: Clean up linux image
    condition: eq(variables['platform'], 'Linux-x86_64')

  - script: |
      set -xe
      cd constructor
      python3 update_version.py --version $(version)
    displayName: Update version

  # miniforge
  - script: |
      set -xe
      mkdir -p $(Pipeline.Workspace)/miniforge
      cd $(Pipeline.Workspace)/miniforge
      wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh
      wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-MacOSX-x86_64.sh
    displayName: Download miniforge

  - script: |
      set -xe
      bash $(Pipeline.Workspace)/miniforge/Miniforge3-$(platform).sh -b -u -p $(Pipeline.Workspace)/miniforge
    displayName: Install miniforge

  - script: |
      set -xe
      source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
      conda update --all -y -n base
    displayName: Update miniforge

  # set up constructor environment
  - script: |
      set -xe
      source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh
      conda create -n construct -y -c conda-forge constructor
    displayName: Set up constructor environment

  - script: |
      set -xe
      source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh

      # cross-platform constructor
      # https://github.com/conda-forge/miniforge/blob/main/scripts/build.sh
      if [[ "$(platform)" == *"arm64" ]]; then
        TEMP_DIR=$(mktemp -d)
        mkdir "${TEMP_DIR}/conda-standalone"
        pushd "${TEMP_DIR}/conda-standalone"
        curl -L -O "https://repo.anaconda.com/pkgs/misc/conda-execs/conda-4.10.3-osx-arm64.exe"
        CONDA_STANDALONE="${PWD}/conda-4.10.3-osx-arm64.exe"
        popd
      fi

      conda activate construct
      cd constructor

      if [[ "$(platform)" == *"arm64" ]]; then
        constructor . --conda-exe ${CONDA_STANDALONE} --platform osx-arm64
      else
        constructor .
      fi

      ls
    displayName: Create installer

  # publish artifact
  - publish: ./constructor/cctbx.xfel-$(version)-$(platform).sh
    artifact: $(platform)-installer

  # run installer
  - script: |
      set -xe
      cd constructor
      chmod +x ./cctbx.xfel-$(version)-$(platform).sh
      ./cctbx.xfel-$(version)-$(platform).sh -b -f -p $(Pipeline.Workspace)/test
    displayName: Run installer
    condition: ne(variables['platform'], 'MacOSX-arm64')

  # test installer
  - script: |
      set -xe
      cd $(Pipeline.Workspace)
      mkdir test_installer
      cd test_installer
      $(Pipeline.Workspace)/test/bin/libtbx.run_tests_parallel \
        module=cctbx \
        module=iotbx \
        module=libtbx \
        module=scitbx \
        module=simtbx \
        nproc=4
    displayName: Test installer
    continueOnError: true
    condition: ne(variables['platform'], 'MacOSX-arm64')

  # upload installer to Google Drive
  - script: |
      set -xe
      source $(Pipeline.Workspace)/miniforge/etc/profile.d/conda.sh

      conda create -n upload -y -c conda-forge python=$(py_ver) pydrive2 tabulate tqdm
      conda activate upload
      if [[ "$OSTYPE" == "darwin"* ]]; then
        conda install -y -c conda-forge python.app
      fi
      conda install -y -c xfel -c conda-forge --no-deps --freeze-installed libboost libboost-python numpy cctbx.xfel

      cd constructor
      libtbx.python ./upload_installer.py \
        --credentials $(upload_key.secureFilePath) \
        --folder_id 1DVRkUc_nlS4i19zyI7OVdUcHcTI50YTz \
        --folder_list $(version) \
        --files ./cctbx.xfel-$(version)-$(platform).sh
    displayName: Upload installer to Google Drive
