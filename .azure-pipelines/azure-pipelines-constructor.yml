# Run constructor after phenix-feedstock finishes

# no continuous integration builds or pull requests
trigger: none
pr: none

resources:
  pipelines:
  - pipeline: phenix_feedstock
    project: 'feedstock-builds'
    source: 'phenix-feedstock'
    trigger: true

jobs:
- job: Construct_phenix_installer

  strategy:
    matrix:
      linux:
        vmImage: ubuntu-latest
        platform: linux
        py_ver: 3.7
      macOS:
        vmImage: macOS-latest
        platform: osx
        py_ver: 3.7

  pool:
    vmImage: $(vmImage)
  timeoutInMinutes: 120

  # variables for version
  variables:
    year: $(Get-Date -Format yyyy)
    month: $(Get-Date -Format MM)
    day: $(Get-Date -Format dd)
    version: $(year).$(month)a$(day)

  steps:

  # set version
  - powershell: |
      $trimmed_month = $(month).TrimStart("0")
      $trimmed_day = $(day).TrimStart("0")
      Write-Host $trimmed_month
      Write-Host $trimmed_day
      Write-Host "##vso[task.setVariable variable=year]$(year)"
      Write-Host "##vso[task.setVariable variable=month]$trimmed_month"
      Write-Host "##vso[task.setVariable variable=day]$trimmed_day"
      Write-Host $(year)
      Write-Host $(month)
      Write-Host $(day)
    displayName: Set variables from date

  - script: |
      version=$(year).$(month)a$(day)
      echo "##vso[task.setVariable variable=version]$version"
      echo $(version)
    displayName: Set version

  - script: |
      set -xe
      release=`echo $(Build.SourceBranch) | sed 's/refs\/heads\/releases\///'`
      echo "##vso[task.setVariable variable=version]$release"
      echo $(version)
    displayName: Override version for release branch
    condition: startswith(variables['Build.SourceBranch'], 'refs/heads/releases/')

  # download sources
  - checkout: self

  - script: |
      set -xe
      cd constructor
      python3 update_version.py --version $(version)
    displayName: Update version

  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation

  # add conda to path
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/anaconda?view=azure-devops&tabs=ubuntu-16-04#add-conda-to-your-system-path
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  # set up constructor environment
  - script: |
      set -xe
      conda create -n construct -y -c conda-forge constructor python=3.9
    displayName: Set up constructor environment

  # patch constructor to avoid check
  - script: |
      set -xe
      cd constructor
      python3 patch_fcp.py --site-packages ${CONDA}/envs/construct/lib/python3.9/site-packages
    displayName: Patch constructor

  # download latest phenix conda package
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'specific'
      project: '$(resources.pipeline.phenix_feedstock.projectID)'
      pipeline: '$(resources.pipeline.phenix_feedstock.pipelineID)'
      preferTriggeringPipeline: true
      allowPartiallySucceededBuilds: true
      allowFailedBuilds: true
      artifact: conda_artifacts_$(resources.pipeline.phenix_feedstock.runID)_$(platform)_64_numpy1.18python$(py_ver).____cpython

  - script: |
      set -xe

      cd $(Pipeline.Workspace)/$(platform)-64

      conda create -n phenix -y
      source activate phenix
      conda install -y phenix*

      cd ${CONDA_PREFIX}/share/phenix/conda_envs

      version=`echo $(py_ver) | sed 's/\.//'`

      conda install -y --file phenix_py${version}_$(platform)-64.txt

      pip install ortools

    displayName: Create installer environment

  - script: |
      set -xe
      source activate construct
      cd constructor
      constructor .
      ls
    displayName: Create installer
