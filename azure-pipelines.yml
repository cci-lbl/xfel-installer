# Build xfel source tarball

# no continuous integration builds or pull requests
trigger: none
pr: none

schedules:
  - cron: '0 5 * * *'
    displayName: Nightly source update
    branches:
      include:
      - main
    always: true

# template location
# resources:
#   repositories:
#     - repository: cctbx_project
#       type: github
#       name: cctbx/cctbx_project
#       endpoint: xfel-installer
#   pipelines:
#   - pipeline: data_cache
#     source: 'Update data cache'

jobs:
- job: Build_xfel_source_tarball
  pool:
    vmImage: ubuntu-latest
  timeoutInMinutes: 360

  # variables for version
  variables:
  - name: year
    value: $(Get-Date -Format yyyy)
  - name: month
    value: $(Get-Date -Format MM)
  - name: day
    value: $(Get-Date -Format dd)
  - name: version
    value: $(year).$(month).a$(day)
  # variable for secrets
  # - group: ENV_GROUP

  steps:

  # ubuntu setup
  - script: |
      sudo apt-get install -y build-essential curl git libgl1-mesa-dev libglu1-mesa-dev locales subversion
      sudo locale-gen en_US.UTF-8
      sudo update-locale
    displayName: Install dependencies for Ubuntu

  # set version
  - powershell: |
      $trimmed_month = $(month).TrimStart("0")
      $trimmed_day = $(day).TrimStart("0")
      Write-Host $trimmed_month
      Write-Host $trimmed_day
      Write-Host "##vso[task.setVariable variable=year]$(year)"
      Write-Host "##vso[task.setVariable variable=month]$trimmed_month"
      Write-Host "##vso[task.setVariable variable=day]$trimmed_day"
      Write-Host $(year)
      Write-Host $(month)
      Write-Host $(day)
    displayName: Set variables from date

  - script: |
      version=$(year).$(month).$(day)
      echo "##vso[task.setVariable variable=version]$version"
      echo $(version)
    displayName: Set version

  - script: |
      set -xe
      release=`echo $(Build.SourceBranch) | sed 's/refs\/heads\/releases\///'`
      echo "##vso[task.setVariable variable=version]$release"
      echo $(version)
    displayName: Override version for release branch
    condition: startswith(variables['Build.SourceBranch'], 'refs/heads/releases/')

  # add conda to path
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/anaconda?view=azure-devops&tabs=ubuntu-16-04#add-conda-to-your-system-path
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  # download support scripts
  - checkout: self
    path: ./xfel-installer

  # link bootstrap.py
  - script: |
      set -xe
      cd $(Pipeline.Workspace)
      wget https://raw.githubusercontent.com/cctbx/cctbx_project/master/libtbx/auto_build/bootstrap.py
      mkdir modules
    displayName: Download bootstrap.py

  # download remaining sources
  - script: |
      set -xe
      cd $(Pipeline.Workspace)
      python bootstrap.py hot update --builder=xfel --python=39 --no-boost-src
      cd modules
      git clone https://github.com/nksauter/LS49.git
      # git clone https://gitlab.com/cctbx/ls49_big_data.git
      git clone https://github.com/lanl/lunus.git
      git clone https://github.com/xia2/xia2.git
      git clone https://github.com/dermen/sim_erice.git
    displayName: Download remaining sources

  - script: |
      set -xe
      cd $(Pipeline.Workspace)/modules
      for r in kokkos kokkos-kernels; download
        cd ${r}
        git checkout 3.7.01
        cd ..
      done
    displayName: Select 3.7.1 for kokkos and kokkos-kernels

  - script: |
      cd $(Pipeline.Workspace)
      cd modules/uc_metrics
      git lfs install --local
      git lfs pull
      # cd ../ls49_big_data
      # git lfs install --local
      # git lfs pull
    displayName: Download LFS files

  # - task: DownloadPipelineArtifact@2
  #   inputs:
  #     source: 'specific'
  #     project: '$(resources.pipeline.data_cache.projectID)'
  #     pipeline: '$(resources.pipeline.data_cache.pipelineID)'
  #     artifact: 'xfel_regression'
  #     path: $(Pipeline.Workspace)/modules/xfel_regression
  #   displayName: Download xfel_regression
  #   continueOnError: true

  # - script: |
  #     if [ ! -d "$(Pipeline.Workspace)/modules/xfel_regression" ]; then
  #       git co https://gitlab.com/cctbx/xfel_regression.git $(Pipeline.Workspace)/modules/xfel_regression
  #     fi
  #     cd $(Pipeline.Workspace)/modules/xfel_regression
  #     git reset --hard origin/main
  #     git lfs install --local
  #     git pull --rebase
  #     git lfs pull
  #   displayName: Update xfel_regression

  # preserve permissions and delete extra files
  - script: |
      cd $(Pipeline.Workspace)
      # rm -fr modules/*/.git/*
      rm -fr modules/*/.svn/*
      rm -fr modules/*.tar
      mkdir xfel_source
      mv modules xfel_source
      tar -cf xfel_source.tar xfel_source
    displayName: Build tarball

  # publish artifact
  - publish: $(Pipeline.Workspace)/xfel_source.tar
    artifact: xfel_modules
